Imports System.Text
Imports DBExtenderLib

Public Class DataRepositorySync
    Public Shared Function RepositoryGetList(ByVal DT As TableNameInfo) As String
        Dim sb As New StringBuilder()

        sb.AppendLine("Imports System.Threading.Tasks")
        sb.AppendLine("Imports AutoMapper.QueryableExtensions")
        sb.AppendLine()
        sb.AppendLine("Public Class " & DT.TablePluralize & "Repository")
        sb.AppendLine("    Implements I" & DT.TablePluralize & "Repository(Of " & DT.TableSingularize & "Vm)")
        sb.AppendLine()
        sb.AppendLine("    Private db As ModelDB")
        sb.AppendLine("    Public Sub New(_db As ModelDB)")
        sb.AppendLine("        db = _db")
        sb.AppendLine("    End Sub")
        sb.AppendLine("    Public Function Get" & DT.TablePluralize & "() As Task(Of " & DT.TablePluralize & "ManagerVM) Implements I" & DT.TablePluralize & "Repository(Of " & DT.TableSingularize & "Vm).Get" & DT.TableSingularize)
        sb.AppendLine("        Dim results As New " & DT.TablePluralize & "ManagerVM")
        sb.AppendLine("        Using db")
        sb.AppendLine("            results." & DT.TableSingularize & "s = db." & DT.TablePluralize & ".ProjectTo(Of " & DT.TableSingularize & "Vm).ToList()")
        sb.AppendLine("        End Using")
        sb.AppendLine("        Return Task.FromResult(results)")
        sb.AppendLine("    End Function")
        sb.AppendLine("")
        sb.AppendLine("    Public Function Get" & DT.TableSingularize & "(id As Integer) As " & DT.TableSingularize & "Vm Implements I" & DT.TablePluralize & "Repository(Of " & DT.TableSingularize & "Vm).Get" & DT.TableSingularize & "")
        sb.AppendLine("        Throw New NotImplementedException()")
        sb.AppendLine("    End Function")
        sb.AppendLine("")
        sb.AppendLine("    Public Function Add(Item As " & DT.TableSingularize & "Vm) As Task Implements IRepositoryBaseAsync(Of " & DT.TableSingularize & "Vm).Add")
        sb.AppendLine("        Dim new" & DT.TableSingularize & " = AutoMapper.Mapper.Map(Of " & DT.TableSingularize & ")(Item)")
        sb.AppendLine("")
        sb.AppendLine("        Using db")
        sb.AppendLine("            db." & DT.TablePluralize & ".Add(new" & DT.TableSingularize & ")")
        sb.AppendLine("            db.SaveChanges()")
        sb.AppendLine("            Item." & DT.TableSingularize & "ID = new" & DT.TableSingularize & "." & DT.TableSingularize & "ID")
        sb.AppendLine("        End Using")
        sb.AppendLine("        Return Task.FromResult(Item)")
        sb.AppendLine("    End Function")
        sb.AppendLine("")
        sb.AppendLine("    Public Function FindItem(id As Integer) As Task(Of " & DT.TableSingularize & "Vm) Implements IRepositoryBaseAsync(Of " & DT.TableSingularize & "Vm).FindItem")
        sb.AppendLine("        Dim result As " & DT.TableSingularize & "Vm")
        sb.AppendLine("        Using db")
        sb.AppendLine("            result = db." & DT.TablePluralize & ".Where(Function(ct) ct." & DT.TableSingularize & "ID = id).ProjectTo(Of " & DT.TableSingularize & "Vm).SingleOrDefault()")
        sb.AppendLine("            If IsNothing(result) Then")
        sb.AppendLine("                Return Task.FromResult(Of " & DT.TableSingularize & "Vm)(Nothing)")
        sb.AppendLine("            End If")
        sb.AppendLine("        End Using")
        sb.AppendLine("        Return Task.FromResult(result)")
        sb.AppendLine("    End Function")
        sb.AppendLine("")
        sb.AppendLine("    Public Function Save() As Task Implements IRepositoryBaseAsync(Of " & DT.TableSingularize & "Vm).Save")
        sb.AppendLine("        Throw New NotImplementedException()")
        sb.AppendLine("    End Function")
        sb.AppendLine("")
        sb.AppendLine("    Public Function Update(Item As " & DT.TableSingularize & "Vm) As Task Implements IRepositoryBaseAsync(Of " & DT.TableSingularize & "Vm).Update")
        sb.AppendLine("        Using db")
        sb.AppendLine("            Dim ct = db." & DT.TablePluralize & ".Find(Item." & DT.GetPrimaryKey.ColumnValue & ")")
        sb.AppendLine("            Dim mapCT = AutoMapper.Mapper.Map(Item, ct)")
        sb.AppendLine("            db.SaveChanges()")
        sb.AppendLine("        End Using")
        sb.AppendLine("        Return Task.FromResult(Item)")
        sb.AppendLine("")
        sb.AppendLine("    End Function")
        sb.AppendLine("")
        sb.AppendLine("    Public Function Delete" & DT.TableSingularize & "(id As Integer) As Task(Of " & DT.TableSingularize & "Vm) Implements I" & DT.TablePluralize & "Repository(Of " & DT.TableSingularize & "Vm).Delete" & DT.TableSingularize & "")
        sb.AppendLine("        Using db")
        sb.AppendLine("            Dim deleteCT = db." & DT.TablePluralize & ".Find(id)")
        sb.AppendLine("            Dim result = db." & DT.TablePluralize & ".Where(Function(ct) ct." & DT.GetPrimaryKey.ColumnValue & " = id).ProjectTo(Of " & DT.TableSingularize & "Vm).SingleOrDefault()")
        sb.AppendLine("")
        sb.AppendLine("            If IsNothing(deleteCT) Then")
        sb.AppendLine("                Return Task.FromResult(Of " & DT.TableSingularize & "Vm)(Nothing)")
        sb.AppendLine("            End If")
        sb.AppendLine("            db." & DT.TablePluralize & ".Remove(deleteCT)")
        sb.AppendLine("            db.SaveChanges()")
        sb.AppendLine("            Return Task.FromResult(result)")
        sb.AppendLine("        End Using")
        sb.AppendLine("")
        sb.AppendLine("    End Function")
        sb.AppendLine("")
        sb.AppendLine("    Public Function RemoveItem(id As Integer) As Task(Of " & DT.TableSingularize & "Vm) Implements IRepositoryBaseAsync(Of " & DT.TableSingularize & "Vm).RemoveItem")
        sb.AppendLine("        Using db")
        sb.AppendLine("            Dim deleteCT = db." & DT.TablePluralize & ".Find(id)")
        sb.AppendLine("")
        sb.AppendLine("            If IsNothing(deleteCT) Then")
        sb.AppendLine("                Return Task.FromResult(Of " & DT.TableSingularize & "Vm)(Nothing)")
        sb.AppendLine("            End If")
        sb.AppendLine("            Dim ct As New " & DT.TableSingularize & "Vm")
        sb.AppendLine("            Dim mapCT = AutoMapper.Mapper.Map(deleteCT, ct)")
        sb.AppendLine("            db." & DT.TablePluralize & ".Remove(deleteCT)")
        sb.AppendLine("            db.SaveChanges()")
        sb.AppendLine("            Return Task.FromResult(ct)")
        sb.AppendLine("        End Using")
        sb.AppendLine("")
        sb.AppendLine("")
        sb.AppendLine("    End Function")
        sb.AppendLine("End Class")

        Return sb.ToString
    End Function
End Class
